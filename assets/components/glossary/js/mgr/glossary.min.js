/*!
 * Glossary - Maintain a Glossary
 * Version: 2.2.1
 * Build date: 2017-06-07
 */

var Glossary=function(a){a=a||{},Glossary.superclass.constructor.call(this,a)};Ext.extend(Glossary,Ext.Component,{page:{},window:{},grid:{},tree:{},panel:{},combo:{},config:{}}),Ext.reg("Glossary",Glossary),Glossary=new Glossary,Glossary.panel.Home=function(a){a=a||{},Ext.applyIf(a,{cls:"container",defaults:{collapsible:!1,autoHeight:!0},items:[{html:"<h2>"+_("glossary.management")+"</h2>",cls:"modx-page-header",border:!1},{xtype:"modx-tabs",defaults:{border:!1,autoHeight:!0},border:!0,items:[{title:_("glossary.terms"),defaults:{autoHeight:!0},items:[{xtype:"glossary-grid-terms",cls:"main-wrapper",preventRender:!0}]}]}]}),Glossary.panel.Home.superclass.constructor.call(this,a)},Ext.extend(Glossary.panel.Home,MODx.Panel),Ext.reg("glossary-panel-home",Glossary.panel.Home),Glossary.grid.Terms=function(a){this.buttonColumnTpl=new Ext.XTemplate('<tpl for="."><tpl if="action_buttons !== null"><ul class="action-buttons"><tpl for="action_buttons"><li><i class="icon {className} icon-{icon}" title="{text}"></i></li></tpl></ul></tpl></tpl>',{compiled:!0}),a=a||{},Ext.applyIf(a,{id:"glossary-grid-terms",url:Glossary.config.connectorUrl,baseParams:{action:"mgr/term/getList"},autosave:!0,save_action:"mgr/term/updateFromGrid",fields:["id","term","explanation"],autoHeight:!0,paging:!0,remoteSort:!0,autoExpandColumn:"explanation",columns:[{header:_("glossary.term"),dataIndex:"term",sortable:!0,width:30,editor:{xtype:"textfield"}},{header:_("glossary.explanation"),dataIndex:"explanation",sortable:!0,width:100,editor:{xtype:"textfield"}},{renderer:{fn:this.buttonColumnRenderer,scope:this},width:20}],tbar:[{text:_("glossary.term_create"),cls:"primary-button",handler:this.createTerm,scope:this},"->",{xtype:"textfield",id:"glossary-filter-search",emptyText:_("search")+"â€¦",submitValue:!1,listeners:{change:{fn:this.search,scope:this},render:{fn:function(a){new Ext.KeyMap(a.getEl(),{key:Ext.EventObject.ENTER,fn:function(){return this.fireEvent("change",this),this.blur(),!0},scope:a})},scope:this}}},{xtype:"button",id:"glossary-filter-clear",cls:"x-form-filter-clear",text:_("filter_clear"),listeners:{click:{fn:this.clearFilter,scope:this}}}]}),Glossary.grid.Terms.superclass.constructor.call(this,a)},Ext.extend(Glossary.grid.Terms,MODx.grid.Grid,{getMenu:function(){var a=[];a.push({text:_("glossary.term_update"),handler:this.updateTerm}),a.push("-"),a.push({text:_("glossary.term_remove"),handler:this.removeTerm}),this.addContextMenuItem(a)},createTerm:function(a,b){this.createUpdateTerm(a,b,!1)},updateTerm:function(a,b){this.createUpdateTerm(a,b,!0)},createUpdateTerm:function(a,b,c){var d;if(c){if(!this.menu.record||!this.menu.record.id)return!1;d=this.menu.record}else d={};var e=MODx.load({xtype:"glossary-window-term-create-update",isUpdate:c,title:c?_("glossary.term_update_long"):_("glossary.term_create_long"),record:d,listeners:{success:{fn:function(){this.refresh()},scope:this},afterRender:{fn:function(a){this.initTinyMCE(a)},scope:e}}});e.fp.getForm().setValues(d),e.show(b.target)},removeTerm:function(){MODx.msg.confirm({title:_("glossary.term_remove"),text:_("glossary.term_remove_confirm"),url:this.config.url,params:{action:"mgr/term/remove",id:this.menu.record.id},listeners:{success:{fn:this.refresh,scope:this}}})},search:function(a){var b=this.getStore();b.baseParams.query=a.getValue(),this.getBottomToolbar().changePage(1),this.refresh()},buttonColumnRenderer:function(){var a={action_buttons:[{className:"update",icon:"pencil-square-o",text:_("glossary.term_update")},{className:"remove",icon:"trash-o",text:_("glossary.term_remove")}]};return this.buttonColumnTpl.apply(a)},onClick:function(a){var b=a.getTarget(),c=b.className.split(" ")[0];if("icon"===c){var d=b.className.split(" ")[1],e=this.getSelectionModel().getSelected();switch(this.menu.record=e.data,d){case"remove":this.removeTerm(e,a);break;case"update":this.updateTerm(e,a)}}},clearFilter:function(){var a=this.getStore();a.baseParams.query="",Ext.getCmp("glossary-filter-search").reset(),this.getBottomToolbar().changePage(1),this.refresh()}}),Ext.reg("glossary-grid-terms",Glossary.grid.Terms),Glossary.window.CreateUpdateTerm=function(a){a=a||{},this.ident=a.ident||"cuterm"+Ext.id(),Ext.applyIf(a,{url:Glossary.config.connectorUrl,action:a.isUpdate?"mgr/term/update":"mgr/term/create",autoHeight:!0,width:700,closeAction:"close",fields:[{xtype:"textfield",fieldLabel:_("glossary.term"),name:"term",anchor:"100%"},{xtype:"textarea",id:this.ident+"-glossary-explanation",fieldLabel:_("glossary.explanation"),name:"explanation",anchor:"100%"},{xtype:"textfield",name:"id",hidden:!0}]}),Glossary.window.CreateUpdateTerm.superclass.constructor.call(this,a)},Ext.extend(Glossary.window.CreateUpdateTerm,MODx.Window,{initTinyMCE:function(a){"undefined"!=typeof MODx.loadRTE&&Glossary.config.html&&MODx.loadRTE(a.ident+"-glossary-explanation")}}),Ext.reg("glossary-window-term-create-update",Glossary.window.CreateUpdateTerm),Glossary.page.Home=function(a){a=a||{},Ext.applyIf(a,{components:[{xtype:"glossary-panel-home",renderTo:"glossary-panel-home"}]}),Glossary.page.Home.superclass.constructor.call(this,a)},Ext.extend(Glossary.page.Home,MODx.Component),Ext.reg("glossary-page-home",Glossary.page.Home);